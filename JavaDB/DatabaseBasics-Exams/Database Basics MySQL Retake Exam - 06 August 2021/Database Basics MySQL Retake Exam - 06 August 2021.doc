#1
## EXAM AUGUST 2021
#1
CREATE TABLE `addresses` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL);

CREATE TABLE `categories` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(10) NOT NULL);

CREATE TABLE `offices` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`workspace_capacity` INT NOT NULL,
`website` VARCHAR(50),
`address_id` INT NOT NULL,
CONSTRAINT `fk_offices_to_addresses`
FOREIGN KEY (`address_id`)
REFERENCES `addresses`(`id`));

CREATE TABLE `employees` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`first_name` VARCHAR(30) NOT NULL,
`last_name` VARCHAR(30) NOT NULL,
`age` INT NOT NULL,
`salary` DECIMAL(10,2) NOT NULL,
`job_title` VARCHAR(20) NOT NULL,
`happiness_level` CHAR(1) NOT NULL);

CREATE TABLE `teams` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL,
`office_id` INT NOT NULL,
CONSTRAINT `fk_teams_offices`
FOREIGN KEY (`office_id`)
REFERENCES `offices`(`id`),
`leader_id` INT NOT NULL UNIQUE,
CONSTRAINT `fk_teams_leaders`
FOREIGN KEY (`leader_id`)
REFERENCES `employees`(`id`));

CREATE TABLE `games` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL UNIQUE,
`description` TEXT,
`rating` FLOAT NOT NULL DEFAULT 5.5,
`budget` DECIMAL(10,2) NOT NULL,
`release_date` DATE,
`team_id` INT NOT NULL,
CONSTRAINT `fk_games_teams`
FOREIGN KEY (`team_id`)
REFERENCES `teams`(`id`));

CREATE TABLE `games_categories`(
`game_id` INT NOT NULL,
CONSTRAINT `fk_games_categories_games`
FOREIGN KEY (`game_id`)
REFERENCES `games`(`id`),
`category_id` INT NOT NULL,
CONSTRAINT `fk_games_categories_categories`
FOREIGN KEY (`category_id`)
REFERENCES `categories`(`id`),
PRIMARY KEY(`game_id`,`category_id`));

#2
INSERT INTO `games`(`name`, `rating`,`budget`, `team_id`)
SELECT lower((SUBSTRING(`name`,2))),
`id`, `leader_id`*1000, `id` FROM `teams`
WHERE `id` BETWEEN 1 AND 9;

#3
UPDATE `employees` AS e 
JOIN `teams` AS t
ON e.`id` = t.`leader_id`
SET `salary` = `salary`+1000
WHERE e.`age`<40 AND `salary`<5000

#4
DELETE g FROM `games` AS g
LEFT JOIN `games_categories` AS gc
ON g.`id` =gc.`game_id`
WHERE gc.`category_id` IS NULL AND g.`release_date` IS NULL ;

#5
SELECT `first_name`, `last_name`, `age`, `salary`, `happiness_level` FROM `employees`
ORDER BY `salary`, `id`;

#6
SELECT t.`name` AS `team_name` ,a.`name` AS `address_name` ,
CHAR_LENGTH(a.`name`) AS `count_of_characters` FROM `teams` AS t
JOIN `offices` AS o
ON t.`office_id` = o.`id`
JOIN `addresses` AS a
ON a.`id` = o.`address_id`
WHERE o.`website` IS NOT NULL
ORDER BY t.`name`, a.`name`;

#7
SELECT c.`name`, COUNT(g.`name`) AS `games_count`,ROUND(AVG(g.`budget`),2) AS `avg_budget`,
MAX(g.`rating`) AS `max_rating` FROM `categories` AS c
JOIN `games_categories` AS gc
ON c.`id` = gc.`category_id`
JOIN `games` AS g
ON g.`id` = gc.`game_id`
GROUP BY c.`name`
HAVING `max_rating`>=9.5
ORDER BY `games_count` DESC, c.`name`;

#8
SELECT g.`name`, g.`release_date`, CONCAT(SUBSTRING(g.`description`,1,10),'...') AS `summary`,
(SELECT CASE 
	WHEN MONTH(g.`release_date`) BETWEEN 1 AND 3 THEN 'Q1'
	WHEN MONTH(g.`release_date`) BETWEEN 4 AND 6 THEN 'Q1'
	WHEN MONTH(g.`release_date`) BETWEEN 7 AND 9 THEN 'Q3'
    ELSE
        'Q4'
 END 
) AS `quarter`,
t.`name` AS `team_name` FROM `games` AS g
JOIN `teams` AS t
 ON g.`team_id` = t.`id`
 WHERE YEAR(g.`release_date`) = 2022 AND RIGHT(g.`name`,1) ='2' AND MONTH(g.`release_date`)%2=0
 ORDER BY `quarter`;

#9
 SELECT  g.`name`,
 (SELECT CASE 
	WHEN g.`budget` <50000 THEN 'Normal budget'
    ELSE
        'Insufficient budget'
 END 
) AS `budget_level`,
 t.`name` AS `team_name`, a.`name` AS `address_name` FROM `games` AS g
 LEFT JOIN `games_categories` AS gc
 ON g.`id` = gc.`game_id`
 JOIN `teams` AS t
 ON g.`team_id` = t.`id`
 JOIN `offices` AS o
 ON o.`id`= t.`office_id`
 JOIN `addresses` AS a
 ON a.`id` = o.`address_id`
 WHERE g.`release_date` IS NULL AND gc.`category_id` IS NULL 
 ORDER BY g.`name`;
 

#10
 CREATE FUNCTION udf_game_info_by_name (game_name VARCHAR (20))
 RETURNS VARCHAR(250)
 DETERMINISTIC
 BEGIN 
 RETURN ( SELECT CONCAT_WS(' ','The',g.`name`,'is developed by a',t.`name`,
 'in an office with an address',a.`name`) AS `info`FROM `games` AS g
 JOIN `teams` AS t
 ON g.`team_id` = t.`id`
 JOIN `offices` AS o
 ON t.`office_id` = o.`id`
 JOIN `addresses` AS a
 ON a.`id` = o.`address_id`
 WHERE g.`name` = game_name);
 END

#11
 CREATE PROCEDURE udp_update_budget(min_game_rating FLOAT)
 BEGIN
UPDATE	`games` AS g
 LEFT JOIN `games_categories` AS gc
 ON g.`id` = gc.`game_id`
 SET g.`budget` = g.`budget`+100000 , g.`release_date` = ADDDATE(g.`release_date`, INTERVAL 1 YEAR)
 WHERE gc.`category_id` IS NULL AND g.`rating`>min_game_rating AND g.`release_date` IS NOT NULL;
 END

