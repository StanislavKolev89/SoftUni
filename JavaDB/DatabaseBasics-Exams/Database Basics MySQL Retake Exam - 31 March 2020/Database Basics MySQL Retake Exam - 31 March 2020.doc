#1
CREATE TABLE `users` (
`id` INT PRIMARY KEY, 
`username` VARCHAR(30) UNIQUE,
`password` VARCHAR(30) NOT NULL,
`email` VARCHAR(50) NOT NULL,
`gender` CHAR(1) NOT NULL, 
`age`	INT NOT NULL,
`job_title` VARCHAR(40) NOT NULL,
`ip` VARCHAR (30) NOT NULL
);

CREATE TABLE `addresses` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`address` VARCHAR(30) NOT NULL,
`town` VARCHAR(30) NOT NULL,
`country` VARCHAR(30) NOT NULL,
`user_id` INT NOT NULL,
CONSTRAINT `fk_addresses_users`
FOREIGN KEY (`user_id`)
REFERENCES `users`(`id`));

CREATE TABLE `photos`(
`id` INT PRIMARY KEY AUTO_INCREMENT,
`description` TEXT NOT NULL,
`date` DATETIME NOT NULL,
`views` INT DEFAULT 0);

CREATE TABLE `comments`(
`id` INT AUTO_INCREMENT PRIMARY KEY,
`comment` VARCHAR(255) NOT NULL,
`date` DATETIME NOT NULL,
`photo_id` INT NOT NULL,
CONSTRAINT `fk_comments_photos`
FOREIGN KEY (`photo_id`)
REFERENCES `photos`(`id`));

CREATE TABLE `users_photos`(
`user_id` INT NOT NULL,
CONSTRAINT `fk_users_photos_users`
FOREIGN KEY (`user_id`)
REFERENCES `users`(`id`),
`photo_id` INT NOT NULL,
CONSTRAINT `fk_users_photos_photos`
FOREIGN KEY (`photo_id`)
REFERENCES `photos`(`id`)
);

CREATE TABLE `likes`(
`id` INT PRIMARY KEY AUTO_INCREMENT,
`photo_id` INT ,
CONSTRAINT `fk_likes_photos`
FOREIGN KEY (`photo_id`)
REFERENCES `photos`(`id`),
`user_id` INT,
CONSTRAINT `fk_likes_users`
FOREIGN KEY (`user_id`)
REFERENCES `users`(`id`));



#2
INSERT INTO `addresses` (`address`,`town`,`country`,`user_id`)
SELECT `username`,`password`,`ip`,`id` FROM `users`; `players

#3
UPDATE `addresses`
SET `country` =CASE
WHEN `country` LIKE 'B%' THEN 'Blocked'
WHEN `country` LIKE 'T%' THEN 'Test'
WHEN  `country` LIKE 'P%' THEN 'In Progress'
END
WHERE `country` LIKE 'B%' OR `country` LIKE 'T%' OR `country` LIKE 'P%';

#4
DELETE FROM `addresses`
WHERE id%3 = 0;

#5
SELECT `username`, `gender`, `age` FROM `users` 
ORDER BY `age` DESC,`username` ;

#6
SELECT p.`id`,p.`date` AS `data_and_time`,
p.`description`, COUNT(co.`id`) AS `commentsCount` FROM `photos` As p 
JOIN `comments` AS co
ON p.`id` = co.`photo_id`
GROUP BY p.`id`
ORDER BY `commentsCOUNT` DESC, p.`id`
LIMIT 5;

#7
SELECT CONCAT(p.`id`,' ',u.`username`) AS `id_username`, u.`email` FROM `users` AS u
JOIN `photos` AS p
WHERE u.`id` = p.`id`
ORDER BY u.`id`;

#8
SELECT p.`id` AS `photo_id`, COUNT(DISTINCT l.`id`)AS `likes_count`, COUNT(DISTINCT c.`comment`) AS `comments_count` FROM `photos` AS P 
LEFT JOIN `likes` AS l
ON p.`id` = l.`photo_id`
LEFT JOIN `comments` AS c 
ON c.`photo_id` = p.`id`
GROUP BY p.`id`
ORDER BY `likes_count` DESC, `comments_count` DESC, `photo_id`;

#9
SELECT CONCAT(SUBSTRING(`description`,1,30),'...') AS 'summary',`date` FROM `photos`
WHERE DAY(`date`) =10
ORDER BY `date` DESC

#10
CREATE FUNCTION udf_users_photos_count(username VARCHAR(30))
RETURNS INT 
DETERMINISTIC
BEGIN
RETURN (SELECT  COUNT(up.`photo_id`) FROM `users` AS u
JOIN `users_photos` AS up
ON u.`id` = up.`user_id`
WHERE u.`username` = username
GROUP BY up.`user_id`
);
 END

#11
CREATE PROCEDURE udp_modify_user (address VARCHAR(30), town VARCHAR(30))
BEGIN
 UPDATE  `users` AS u
JOIN `addresses` AS a
ON u.`id` = a.`user_id`
SET u.`age`= u.`age`+10
WHERE a.`address` = address AND a.`town` = town; 
END;


